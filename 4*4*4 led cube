/ *
  4x4x4 LED Küp
  Bağlantı Kurulumu: 
  Sütunlar
  [(x, y) -Pin]
  (1,1) -13
  (1,2) -12
  (1,3) -11
  (1,4) -10
  (2, 1) -9
  (2, 2) -8
  (2, 3) -7
  (2, 4) -6
  (3,1) -5
  (3-2) -4
  (3-3) -3
  (3,4) -2
  (4,1) -1
  (4,2) -0
  (4,3) -A5
  (4,4) -A4
  Katmanlar
  [katman-Pin]
  a-A0
  b-A1
  c-A2
  d-A3
* /
// led satırları başlatma ve bildirme
  int sütun [ 16 ] = { 13 , 12 , 11 , 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 , 0 , A5, A4};
// led katmanları başlatma ve bildirme
  int katman [ 4 ] = {A3, A2, A1, A0};

  int zaman = 250 ;
 
geçersiz  kurulum ()
{
  // satırları çıktıya ayarlamak
  for ( int i = 0 ; i < 16 ; i ++)
  {
    pinMode (sütun [i], ÇIKTI);
  }
  // çıktı için katmanları ayarlama
  for ( int i = 0 ; i < 4 ; i ++)
  {
    pinMode (katman [i], ÇIKTI);
  }
  // rastgele desen için rastgele tohumlama
  randomSeed ( analogRead ( 10 ));
}
// xxxxxxxxxxxxxxxxxxxxFONKSİYON LOOPxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

geçersiz  döngü ()
{
  turnEverythingOff (); // hepsini kapat
  flickerOn ();
  turnEverythingOn (); // hepsini aç
  gecikme ( zaman );
  turnOnAndOffAllByLayerUpAndDownNotTimed ();
  layertompUpAndDown ();
  turnOnAndOffAllByColumnSideways ();
  gecikme ( zaman );
  aroundEdgeDown ();
  turnEverythingOff ();
  randomflicker ();
  randomRain ();
  diagonalRectangle ();
  goThroughAllLedsOneAtATime ();
  pervane ();
  spiralInAndOut ();
  flickerOff ();
  turnEverythingOff ();
  gecikme ( 2000 );
}


// xxxxxxxxxxxxxxxxxxxxFONKSİYONLARxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

// ////////////////////////////////////////////// ///////// hepsini kapat
void  turnEverythingOff ()
 {
   for ( int i = 0 ; i < 16 ; i ++)
   {
     digitalWrite (sütun [i], 1 );
   }
   for ( int i = 0 ; i < 4 ; i ++)
   {
     digitalWrite (katman [i], 0 );
   }
 }
 
// ////////////////////////////////////////////// ////////// hepsini aç
void  turnEverythingOn ()
{
  for ( int i = 0 ; i < 16 ; i ++)
  {
    digitalWrite (sütun [i], 0 );
  }
  // katmanları açma
  for ( int i = 0 ; i < 4 ; i ++)
  {
    digitalWrite (katman [i], 1 );
  }
}
// ////////////////////////////////////////////// ///// sütunları kapat
void  turnColumnsOff ()
{
  for ( int i = 0 ; i < 16 ; i ++)
  {
    digitalWrite (sütun [i], 1 );
  }
}
// ////////////////////////////////////////////// /////////// titreme açık
void  flickerOn ()
{
  int i = 150 ;
  süre (i! = 0 )
  {
    turnEverythingOn ();
    gecikme (i);
    turnEverythingOff ();
    gecikme (i);
    i- = 5 ;
  }
}
// //////////// her şeyi katman yukarı ve aşağı katlayarak açıp kapatın ZAMANLANMADI
void  turnOnAndOffAllByLayerUpAndDownNotTimed ()
{
  int x = 75 ;
  for ( int i = 5 ; i! = 0 ; i--)
  {
    turnEverythingOn ();
    for ( int i = 4 ; i! = 0 ; i--)
    {
      digitalWrite (katman [i- 1 ], 0 );
      gecikme (x);
    }
    for ( int i = 0 ; i < 4 ; i ++)
    {
      digitalWrite (katman [i], 1 );
      gecikme (x);
    }
      for ( int i = 0 ; i < 4 ; i ++)
    {
      digitalWrite (katman [i], 0 );
      gecikme (x);
    }
    for ( int i = 4 ; i! = 0 ; i--)
    {
      digitalWrite (katman [i- 1 ], 1 );
      gecikme (x);
    }
  }
}
// //////////////////////// her şeyi sütunlara göre açıp kapatın
void  turnOnAndOffAllByColumnSideways ()
{
  int x = 75 ;
  turnEverythingOff ();
  // katmanları aç
  for ( int i = 0 ; i < 4 ; i ++)
  {
    digitalWrite (katman [i], 1 );
  }
  for ( int y = 0 ; y < 3 ; y ++)
  {
    // 0-3'ü aç
    for ( int i = 0 ; i < 4 ; i ++)
    {
      digitalWrite (sütun [i], 0 );
      gecikme (x);
    }
    // 4-7'yi aç
    for ( int i = 4 ; i < 8 ; i ++)
    {
      digitalWrite (sütun [i], 0 );
      gecikme (x);
    }
    // 8-11'i aç
    for ( int i = 8 ; i < 12 ; i ++)
    {
      digitalWrite (sütun [i], 0 );
      gecikme (x);
    }
    // 12-15'i aç
    for ( int i = 12 ; i < 16 ; i ++)
    {
      digitalWrite (sütun [i], 0 );
      gecikme (x);
    }
    // 0-3'ü kapat
    for ( int i = 0 ; i < 4 ; i ++)
    {
      digitalWrite (sütun [i], 1 );
      gecikme (x);
    }
    // 4-7'yi kapat
    for ( int i = 4 ; i < 8 ; i ++)
    {
      digitalWrite (sütun [i], 1 );
      gecikme (x);
    }
    // 8-11'i kapat
    for ( int i = 8 ; i < 12 ; i ++)
    {
      digitalWrite (sütun [i], 1 );
      gecikme (x);
    }
    // 12-15'i kapat
    for ( int i = 12 ; i < 16 ; i ++)
    {
      digitalWrite (sütun [i], 1 );
      gecikme (x);
    }
    // 12-15'i aç
    for ( int i = 12 ; i < 16 ; i ++)
    {
      digitalWrite (sütun [i], 0 );
      gecikme (x);
    }
    // 8-11'i aç
    for ( int i = 8 ; i < 12 ; i ++)
    {
      digitalWrite (sütun [i], 0 );
      gecikme (x);
    }
    // 4-7'yi aç
    for ( int i = 4 ; i < 8 ; i ++)
    {
      digitalWrite (sütun [i], 0 );
      gecikme (x);
    }
    // 0-3'ü aç
    for ( int i = 0 ; i < 4 ; i ++)
    {
      digitalWrite (sütun [i], 0 );
      gecikme (x);
    }
    // 12-15'i kapat
    for ( int i = 12 ; i < 16 ; i ++)
    {
      digitalWrite (sütun [i], 1 );
      gecikme (x);
    }
    // 8-11'i kapat
    for ( int i = 8 ; i < 12 ; i ++)
    {
      digitalWrite (sütun [i], 1 );
      gecikme (x);
    }
    // 4-7'yi kapat
    for ( int i = 4 ; i < 8 ; i ++)
    {
      digitalWrite (sütun [i], 1 );
      gecikme (x);
    }
    // 0-3'ü kapat
    for ( int i = 0 ; i < 4 ; i ++)
    {
      digitalWrite (sütun [i], 1 );
      gecikme (x);
    }
  }
}
// /////////////////////////////////////// yukarı ve aşağı tek katmanlı pedal
void  layertompUpAndDown ()
{
  int x = 75 ;
  for ( int i = 0 ; i < 4 ; i ++)
  {
    digitalWrite (katman [i], 0 );
  }
  for ( int y = 0 ; y < 5 ; y ++)
  {
    for ( int count = 0 ; count < 1 ; count ++)
    { 
      for ( int i = 0 ; i < 4 ; i ++)
      {
        digitalWrite (katman [i], 1 );
        gecikme (x);
        digitalWrite (katman [i], 0 );
      }
      for ( int i = 4 ; i! = 0 ; i--)
      {
        digitalWrite (katman [i- 1 ], 1 );
        gecikme (x);
        digitalWrite (katman [i- 1 ], 0 );
      }
    }
    for ( int i = 0 ; i < 4 ; i ++)
    {
      digitalWrite (katman [i], 1 );
      gecikme (x);
    }
    for ( int i = 4 ; i! = 0 ; i--)
    {
      digitalWrite (katman [i- 1 ], 0 );
      gecikme (x);
    }
  }
}
// ////////////////////////////////////////////// ////////// titreme kapalı
void  flickerOff ()
{
  turnEverythingOn ();
  for ( int i = 0 ; i! = 150 ; i + = 5 )
  {
    turnEverythingOff ();
    gecikme (i + 50 );
    turnEverythingOn ();
    gecikme (i);
  }
}
// /////////////////////////////////////// küpün çevresinde aşağı
void  aroundEdgeDown ()
{
  for ( int x = 200 ; x! = 0 ; x - = 50 )
  {
    turnEverythingOff ();
    for ( int i = 4 ; i! = 0 ; i--)
    {
      digitalWrite (katman [i- 1 ], 1 );
      digitalWrite (sütun [ 5 ], 0 );
      digitalWrite (sütun [ 6 ], 0 );
      digitalWrite (sütun [ 9 ], 0 );
      digitalWrite (sütun [ 10 ], 0 );
      
      digitalWrite (sütun [ 0 ], 0 );
      gecikme (x);
      digitalWrite (sütun [ 0 ], 1 );
      digitalWrite (sütun [ 4 ], 0 );
      gecikme (x);
      digitalWrite (sütun [ 4 ], 1 );
      digitalWrite (sütun [ 8 ], 0 );
      gecikme (x);
      digitalWrite (sütun [ 8 ], 1 );
      digitalWrite (sütun [ 12 ], 0 );
      gecikme (x);
      digitalWrite (sütun [ 12 ], 1 );
      digitalWrite (sütun [ 13 ], 0 );
      gecikme (x);
      digitalWrite (sütun [ 13 ], 1 );
      digitalWrite (sütun [ 15 ], 0 );
      gecikme (x);
      digitalWrite (sütun [ 15 ], 1 );
      digitalWrite (sütun [ 14 ], 0 );
      gecikme (x);
      digitalWrite (sütun [ 14 ], 1 );
      digitalWrite (sütun [ 11 ], 0 );
      gecikme (x);
      digitalWrite (sütun [ 11 ], 1 );
      digitalWrite (sütun [ 7 ], 0 );
      gecikme (x);
      digitalWrite (sütun [ 7 ], 1 );
      digitalWrite (sütun [ 3 ], 0 );
      gecikme (x);
      digitalWrite (sütun [ 3 ], 1 );
      digitalWrite (sütun [ 2 ], 0 );
      gecikme (x);
      digitalWrite (sütun [ 2 ], 1 );
      digitalWrite (kolon [ 1 ], 0 );
      gecikme (x);
      digitalWrite (kolon [ 1 ], 1 );
    }
  }
}
// ////////////////////////////////////////////// /////// rastgele titreme
void  randomflicker ()
{
  turnEverythingOff ();
  int x = 10 ;
  for ( int i = 0 ; i! = 750 ; i + = 2 )
  {
  int randomLayer = random ( 0 , 4 );
  int randomColumn = random ( 0 , 16 );
  
  digitalWrite (katman [randomLayer], 1 );
  digitalWrite (kolon [randomColumn], 0 );
  gecikme (x);
  digitalWrite (katman [randomLayer], 0 );
  digitalWrite (sütun [randomColumn], 1 );
  gecikme (x);
  }
}
// ////////////////////////////////////////////// ////////// rastgele yağmur
void  randomRain ()
{
  turnEverythingOff ();
  int x = 100 ;
  for ( int i = 0 ; i! = 60 ; i + = 2 )
  {
    int randomColumn = random ( 0 , 16 );
    digitalWrite (kolon [randomColumn], 0 );
    digitalWrite (katman [ 0 ], 1 );
    gecikme (x + 50 );
    digitalWrite (katman [ 0 ], 0 );
    digitalWrite (katman [ 1 ], 1 );
    gecikme (x);
    digitalWrite (katman [ 1 ], 0 );
    digitalWrite (katman [ 2 ], 1 );
    gecikme (x);
    digitalWrite (katman [ 2 ], 0 );
    digitalWrite (katman [ 3 ], 1 );
    gecikme (x + 50 );
    digitalWrite (katman [ 3 ], 0 );
    digitalWrite (sütun [randomColumn], 1 );
  }
}
// ////////////////////////////////////////////// /// köşegen dikdörtgen
void  diagonalRectangle ()
{
  int x = 350 ;
  turnEverythingOff ();
  for ( int count = 0 ; count < 5 ; count ++)
  {
    // sol üst
    for ( int i = 0 ; i < 8 ; i ++)
    {
      digitalWrite (sütun [i], 0 );
    }
    digitalWrite (katman [ 3 ], 1 );
    digitalWrite (katman [ 2 ], 1 );
    gecikme (x);
    turnEverythingOff ();
    // orta orta
    for ( int i = 4 ; i < 12 ; i ++)
    {
      digitalWrite (sütun [i], 0 );
    }
    digitalWrite (katman [ 1 ], 1 );
    digitalWrite (katman [ 2 ], 1 );
    gecikme (x);
    turnEverythingOff ();
    // sağ alt
    for ( int i = 8 ; i < 16 ; i ++)
    {
      digitalWrite (sütun [i], 0 );
    }
    digitalWrite (katman [ 0 ], 1 );
    digitalWrite (katman [ 1 ], 1 );
    gecikme (x);
    turnEverythingOff ();
    // alt orta
    for ( int i = 4 ; i < 12 ; i ++)
    {
      digitalWrite (sütun [i], 0 );
    }
    digitalWrite (katman [ 0 ], 1 );
    digitalWrite (katman [ 1 ], 1 );
    gecikme (x);
    turnEverythingOff ();
    // sol alt
    for ( int i = 0 ; i < 8 ; i ++)
    {
      digitalWrite (sütun [i], 0 );
    }
    digitalWrite (katman [ 0 ], 1 );
    digitalWrite (katman [ 1 ], 1 );
    gecikme (x);
    turnEverythingOff ();
    // orta orta
    for ( int i = 4 ; i < 12 ; i ++)
    {
      digitalWrite (sütun [i], 0 );
    }
    digitalWrite (katman [ 1 ], 1 );
    digitalWrite (katman [ 2 ], 1 );
    gecikme (x);
    turnEverythingOff ();
    // sağ üst
    for ( int i = 8 ; i < 16 ; i ++)
    {
      digitalWrite (sütun [i], 0 );
    }
    digitalWrite (katman [ 2 ], 1 );
    digitalWrite (katman [ 3 ], 1 );
    gecikme (x);
    turnEverythingOff ();
    // üst orta
    for ( int i = 4 ; i < 12 ; i ++)
    {
      digitalWrite (sütun [i], 0 );
    }
    digitalWrite (katman [ 2 ], 1 );
    digitalWrite (katman [ 3 ], 1 );
    gecikme (x);
    turnEverythingOff ();
  }
  // sol üst
  for ( int i = 0 ; i < 8 ; i ++)
  {
    digitalWrite (sütun [i], 0 );
  }
  digitalWrite (katman [ 3 ], 1 );
  digitalWrite (katman [ 2 ], 1 );
  gecikme (x);
  turnEverythingOff ();
}
// ////////////////////////////////////////////// //////////// pervane
boş  pervane ()
{
  turnEverythingOff ();
  int x = 90 ;
  for ( int y = 4 ; y> 0 ; y--)
  {
    for ( int i = 0 ; i < 6 ; i ++)
    {
      // katmanı aç
      digitalWrite (katman [y- 1 ], 1 );
      // a1
      turnColumnsOff ();
      digitalWrite (sütun [ 0 ], 0 );
      digitalWrite (sütun [ 5 ], 0 );
      digitalWrite (sütun [ 10 ], 0 );
      digitalWrite (sütun [ 15 ], 0 );
      gecikme (x);
      // b1
      turnColumnsOff ();
      digitalWrite (sütun [ 4 ], 0 );
      digitalWrite (sütun [ 5 ], 0 );
      digitalWrite (sütun [ 10 ], 0 );
      digitalWrite (sütun [ 11 ], 0 );
      gecikme (x);
      // c1
      turnColumnsOff ();
      digitalWrite (sütun [ 6 ], 0 );
      digitalWrite (sütun [ 7 ], 0 );
      digitalWrite (sütun [ 8 ], 0 );
      digitalWrite (sütun [ 9 ], 0 );
      gecikme (x);
      // d1
      turnColumnsOff ();
      digitalWrite (sütun [ 3 ], 0 );
      digitalWrite (sütun [ 6 ], 0 );
      digitalWrite (sütun [ 9 ], 0 );
      digitalWrite (sütun [ 12 ], 0 );
      gecikme (x);
      // d2
      turnColumnsOff ();
      digitalWrite (sütun [ 2 ], 0 );
      digitalWrite (sütun [ 6 ], 0 );
      digitalWrite (sütun [ 9 ], 0 );
      digitalWrite (sütun [ 13 ], 0 );
      gecikme (x);
      // d3
      turnColumnsOff ();
      digitalWrite (kolon [ 1 ], 0 );
      digitalWrite (sütun [ 5 ], 0 );
      digitalWrite (sütun [ 10 ], 0 );
      digitalWrite (sütun [ 14 ], 0 );
      gecikme (x);
    }
  }
  // d4
  turnColumnsOff ();
  digitalWrite (sütun [ 0 ], 0 );
  digitalWrite (sütun [ 5 ], 0 );
  digitalWrite (sütun [ 10 ], 0 );
  digitalWrite (sütun [ 15 ], 0 );
  gecikme (x);
}
// ////////////////////////////////////////////// //// spiral içeri ve dışarı
void  spiralInAndOut ()
{
  turnEverythingOn ();
  int x = 60 ;
  for ( int i = 0 ; i < 6 ; i ++)
  {
    // saat yönünde spiral
    digitalWrite (sütun [ 0 ], 1 );
    gecikme (x);
    digitalWrite (kolon [ 1 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 2 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 3 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 7 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 11 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 15 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 14 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 13 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 12 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 8 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 4 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 5 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 6 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 10 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 9 ], 1 );
    gecikme (x);
    // ///////////////////////////////////// saat yönünün tersine spiral
    digitalWrite (sütun [ 9 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 10 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 6 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 5 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 4 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 8 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 12 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 13 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 14 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 15 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 11 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 7 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 3 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 2 ], 0 );
    gecikme (x);
    digitalWrite (kolon [ 1 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 0 ], 0 );
    gecikme (x);
    // ///////////////////////////////////// saatin tersi yönde spiral
    digitalWrite (sütun [ 0 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 4 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 8 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 12 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 13 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 14 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 15 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 11 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 7 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 3 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 2 ], 1 );
    gecikme (x);
    digitalWrite (kolon [ 1 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 5 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 9 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 10 ], 1 );
    gecikme (x);
    digitalWrite (sütun [ 6 ], 1 );
    gecikme (x);
    // ////////////////////////////////////////// Saat yönünde ilerleyin
    digitalWrite (sütun [ 6 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 10 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 9 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 5 ], 0 );
    gecikme (x);
    digitalWrite (kolon [ 1 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 2 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 3 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 7 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 11 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 15 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 14 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 13 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 12 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 8 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 4 ], 0 );
    gecikme (x);
    digitalWrite (sütun [ 0 ], 0 );
    gecikme (x);
  }
}
// //////////////////////////////////// tüm ledlerden birer birer gidin
void  goThroughAllLedsOneAtATime ()
{
  int x = 15 ;
  turnEverythingOff ();
  for ( int y = 0 ; y < 5 ; y ++)
  {
    // 0-3
    for ( int count = 4 ; count! = 0 ; count--)
    {
      digitalWrite (katman [ sayı- 1 ], 1 );
      for ( int i = 0 ; i < 4 ; i ++)
      {
        digitalWrite (sütun [i], 0 );
        gecikme (x);
        digitalWrite (sütun [i], 1 );
        gecikme (x);
      }
    digitalWrite (katman [ sayı- 1 ], 0 );
    }
    // 4-7
    for ( int count = 0 ; count < 4 ; count ++)
    {
      digitalWrite (katman [sayım], 1 );
      for ( int i = 4 ; i < 8 ; i ++)
      {
        digitalWrite (sütun [i], 0 );
        gecikme (x);
        digitalWrite (sütun [i], 1 );
        gecikme (x);
      }
    digitalWrite (katman [sayım], 0 );
    }
    // 8-11
    for ( int count = 4 ; count! = 0 ; count--)
    {
      digitalWrite (katman [ sayı- 1 ], 1 );
      for ( int i = 8 ; i < 12 ; i ++)
      {
        digitalWrite (sütun [i], 0 );
        gecikme (x);
        digitalWrite (sütun [i], 1 );
        gecikme (x);
      }
    digitalWrite (katman [ sayı- 1 ], 0 );
    }
    // 12-15
    for ( int count = 0 ; count < 4 ; count ++)
    {
      digitalWrite (katman [sayım], 1 );
      for ( int i = 12 ; i < 16 ; i ++)
      {
        digitalWrite (sütun [i], 0 );
        gecikme (x);
        digitalWrite (sütun [i], 1 );
        gecikme (x);
      }
    digitalWrite (katman [sayım], 0 );
    }
  }
}
